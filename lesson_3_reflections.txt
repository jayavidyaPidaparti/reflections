When would you want to use a remote repository rather than keeping all your work local?

I would want to use a remote repository rather than keeping all my work local when I would like to share my work with 
other team members, so that they can view my content in the files and make any changes if needed or add something new.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

We might want to always pull changes manually, so that any changes made in the remote by others can also be updated in the local repository.

Describe the differences between forks, clones and branches. When would you use one instead of another?

Forking is making a copy of someone else's repository into your own repository on GitHub. Clone is copy of a repository from Github to your local machine. A branch is created on the local machine only. 
We would use fork when we want to copy files from someone else's repository to our own on GitHub and then making changes to this repository without affecting the original one. We would use a clone when we want to copy a repository from GitHub to local machine and then making changes on local machine without affecting the remote. We would use branches on local machine only when we want to make any experimental changes.

What is the benefit of having a copy of the last known state of the remote stored locally?

The main benefit of having a copy of the last known state of the remote stored locally is that we will have copy of the remote repository when we go offline, then we could make any changes to the local repository offline, merge the changes and save our changes to the remote when we go online using git push.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without using Git or GitHub, I may collaborate using Google Docs or Dropbox. But that would be harder and more difficult.
Using Git or GitHub for collaboration would be easier, as I can share my work with others and also others can review my work/files and provide comments, suggest changes through GitHub.

When would you want to make changes in a separate branch rather than directly on master? What benefits does each approach have?
I would want to make changes in a separate branch rather than directly on master, when I want to introduce some changes in my program and share these changes with others, so that others can view these changes and then provide their feedback. Then after getting the feedback, I would like to incorporate these changes, commit and merge with the master.
It's easier to make changes directly on master, but that would not allow me to maintain an experimental version of my program. 